@inject AppState AppState

@using Dashboard.StateContainers;


<div class="fixed-plugin @(AppState.IsShowThemeSelector ? "show" : "")">
	<a class="fixed-plugin-button text-dark position-fixed px-3 py-2" @onclick=@(() => ShowThemeSelector())>
		<i class="fa fa-cog py-2"> </i>
	</a>
	<div class="card shadow-lg">
		<div class="card-header pb-0 pt-3 bg-transparent ">
			<div class="float-start">
				<h5 class="mt-3 mb-0">Theme Configurator</h5>
				<p>See our dashboard options.</p>
			</div>
			<div class="float-end mt-4">
				<button class="btn btn-link text-dark p-0 fixed-plugin-close-button" @onclick=@(() => ShowThemeSelector())>
					<i class="fa fa-close"></i>
				</button>
			</div>
		</div>
		<hr class="horizontal dark my-1">
		<div class="card-body pt-sm-3 pt-0 overflow-auto">
			<div>
				<h6 class="mb-0">Sidebar Colors</h6>
			</div>
			<a href="javascript:void(0)" class="switch-trigger background-color">
				<div class="badge-colors my-2 text-start">
					<span class="badge filter bg-gradient-primary @primary" data-color="primary" @onclick=@(() => SideBarColor("primary"))></span>
					<span class="badge filter bg-gradient-dark @dark" data-color="dark" @onclick=@(() => SideBarColor("dark"))></span>
					<span class="badge filter bg-gradient-info @info" data-color="info" @onclick=@(() => SideBarColor("info"))></span>
					<span class="badge filter bg-gradient-success @success" data-color="success" @onclick=@(() => SideBarColor("success"))></span>
					<span class="badge filter bg-gradient-warning @warning" data-color="warning" @onclick=@(() => SideBarColor("warning"))></span>
					<span class="badge filter bg-gradient-danger @danger" data-color="danger" @onclick=@(() => SideBarColor("danger"))></span>
				</div>
			</a>
			<!-- Sidenav Type -->
			<div class="mt-3">
				<h6 class="mb-0">Sidenav Type</h6>
				<p class="text-sm">Choose between 2 different sidenav types.</p>
			</div>
			<div class="d-flex">
				<button class="btn bg-gradient-primary w-100 px-3 mb-2 @whiteSideBar me-2" data-class="bg-white" @onclick=@(() => SideBarType("bg-white"))>White</button>
				<button class="btn bg-gradient-primary w-100 px-3 mb-2 @darkSideBar" data-class="bg-default" @onclick=@(() => SideBarType("bg-default"))>Dark</button>
			</div>
			<p class="text-sm d-xl-none d-block mt-2">You can change the sidenav type just on desktop view.</p>
			<!-- Navbar Fixed -->
			<div class="d-flex my-3">
				<h6 class="mb-0">Navbar Fixed</h6>
				<div class="form-check form-switch ps-0 ms-auto my-auto">
					<input class="form-check-input mt-1 ms-auto" type="checkbox" id="navbarFixed" @onclick=@(() => NavbarFixed())>
				</div>
			</div>
			<hr class="horizontal dark mb-1">
			<div class="d-flex my-4">
				<h6 class="mb-0">Sidenav Mini</h6>
				<div class="form-check form-switch ps-0 ms-auto my-auto">
					<input class="form-check-input mt-1 ms-auto" type="checkbox" id="navbarMinimize" @onclick=@(() => NavbarMinimize())>
				</div>
			</div>
			<hr class="horizontal dark my-sm-4">
			<div class="mt-2 mb-5 d-flex">
				<h6 class="mb-0">Light / Dark</h6>
				<div class="form-check form-switch ps-0 ms-auto my-auto">
					<input class="form-check-input mt-1 ms-auto" type="checkbox" id="dark-version" @onclick=@(() => DarkMode())>
				</div>
			</div>
		</div>
	</div>
</div>

@code {

	string primary = "active";
	string dark = "";
	string info = "";
	string success = "";
	string warning = "";
	string danger = "";


	string whiteSideBar = "active";
	string darkSideBar = "";

	async Task SideBarColor(string color)
	{
		primary = (color == "primary") ? "active" : "";
		dark = (color == "dark") ? "active" : "";
		info = (color == "info") ? "active" : "";
		success = (color == "success") ? "active" : "";
		warning = (color == "warning") ? "active" : "";
		danger = (color == "danger") ? "active" : "";

		AppState.SetSideBarColor(color);
	}

	async Task SideBarType(string type) { whiteSideBar = (type == "bg-white") ? "active" : ""; darkSideBar = (type == "bg-default") ? "active" : ""; AppState.SetSideBarType(type); }
	async Task NavbarFixed() => AppState.SetNavbarFixed();
	async Task NavbarMinimize() => AppState.SetSideBarMinimize();
	async Task DarkMode() => AppState.SetDarkMode();
	async Task ShowThemeSelector() => AppState.SetIsShowThemeSelector();
	protected override void OnInitialized() => AppState.OnChange += StateHasChanged;
	public void Dispose() => AppState.OnChange -= StateHasChanged;


}
